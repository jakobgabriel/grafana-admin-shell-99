version: "3.8"
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - VITE_SUPABASE_URL=http://localhost:8000
      - VITE_SUPABASE_ANON_KEY=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwiaWF0IjoxNjQxNzY5MjAwLCJleHAiOjE3OTk1MzkyMDAsInJvbGUiOiJhbm9uIn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE
    depends_on:
      - kong
    networks:
      - grafana-network

  supabase-db:
    image: supabase/postgres:15.1.0.117
    hostname: supabase-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - ./supabase/init.sql:/docker-entrypoint-initdb.d/init.sql
      - supabase-db-data:/var/lib/postgresql/data
    networks:
      - grafana-network
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: pg_isready -U postgres -h localhost
      interval: 5s
      timeout: 5s
      retries: 10

  studio:
    image: supabase/studio:20240115-9d177ad
    ports:
      - "54323:3000"
    environment:
      STUDIO_PG_META_URL: http://meta:8080
      SUPABASE_URL: http://kong:8000
      SUPABASE_PUBLIC_URL: http://localhost:8000
      SUPABASE_ANON_KEY: ${VITE_SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwiaWF0IjoxNjQxNzY5MjAwLCJleHAiOjE3OTk1MzkyMDAsInJvbGUiOiJzZXJ2aWNlX3JvbGUifQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q
    depends_on:
      - supabase-db
      - kong
      - auth
      - rest
      - meta
    networks:
      - grafana-network

  kong:
    image: kong:2.8.1
    ports:
      - "8000:8000/tcp"
      - "8443:8443/tcp"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl
    volumes:
      - ./volumes/kong.yml:/var/lib/kong/kong.yml
    networks:
      - grafana-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth:
    image: supabase/gotrue:v2.132.3
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: http://localhost:8000
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_HOST: supabase-db
      GOTRUE_DB_PORT: 5432
      GOTRUE_DB_NAME: postgres
      GOTRUE_DB_USER: postgres
      GOTRUE_DB_PASSWORD: ${POSTGRES_PASSWORD}
      GOTRUE_SITE_URL: http://localhost:3000
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_DISABLE_SIGNUP: "false"
    depends_on:
      supabase-db:
        condition: service_healthy
    networks:
      - grafana-network

  rest:
    image: postgrest/postgrest:v11.2.0
    environment:
      PGRST_DB_URI: postgres://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/postgres
      PGRST_DB_SCHEMA: public,storage
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    depends_on:
      - supabase-db
    networks:
      - grafana-network

  realtime:
    image: supabase/realtime:v2.25.22
    environment:
      DB_HOST: supabase-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: postgres
      PORT: 4000
      JWT_SECRET: ${JWT_SECRET}
      REPLICATION_MODE: RLS
      REPLICATION_POLL_INTERVAL: 100
      SECURE_CHANNELS: "true"
      SLOT_NAME: supabase_realtime_rls
      TEMPORARY_SLOT: "true"
    depends_on:
      - supabase-db
    networks:
      - grafana-network

  storage:
    image: supabase/storage-api:v0.40.4
    environment:
      ANON_KEY: ${VITE_SUPABASE_ANON_KEY}
      SERVICE_KEY: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwiaWF0IjoxNjQxNzY5MjAwLCJleHAiOjE3OTk1MzkyMDAsInJvbGUiOiJzZXJ2aWNlX3JvbGUifQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q
      PROJECT_REF: local
      REGION: local
      GLOBAL_S3_BUCKET: local
      POSTGREST_URL: http://rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/postgres
      TENANT_ID: stub
      SALT: supabasestoragesalt
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      STORAGE_JWT_SECRET: ${JWT_SECRET}
      ENABLE_IMAGE_TRANSFORMATION: "true"
      IMGPROXY_URL: http://imgproxy:5001
    volumes:
      - storage-data:/var/lib/storage
    depends_on:
      - rest
      - imgproxy
    networks:
      - grafana-network

  meta:
    image: supabase/postgres-meta:v0.68.0
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: supabase-db
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - supabase-db
    networks:
      - grafana-network

  imgproxy:
    image: darthsim/imgproxy:v3.8.0
    environment:
      IMGPROXY_BIND: ":5001"
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /
      IMGPROXY_USE_ETAG: "true"
    networks:
      - grafana-network

  inbucket:
    image: inbucket/inbucket:3.0.3
    ports:
      - "9000:9000"
    networks:
      - grafana-network

volumes:
  supabase-db-data:
  storage-data:

networks:
  grafana-network:
    driver: bridge